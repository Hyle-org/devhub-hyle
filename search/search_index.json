{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Hyl\u00e9 developer docs","text":"<p>Note</p> <p>This developer portal and the project itself are still in early development. See below on how to reach out to us if you need anything that isn't here.</p> <p>Hyl\u00e9 is your minimal layer one, focused only on verifying zero-knowledge proofs.</p>"},{"location":"#understanding-hyle","title":"Understanding Hyl\u00e9","text":"<p>Hyl\u00e9 is a blockchain focused on verifying all types of zero knowledge proofs, enabling fast, cheap settlement.</p> <p>Hyl\u00e9 separates execution, settlement and storage to give you maximal flexibility. You can execute your smart contracts off-chain anywhere you like, on a rollup, on-premise or even client-side. You can store your data securely in your backend, IPFS, Arweave or any other long-term solution: Hyl\u00e9 provides the verifiable source of truth for your end user.</p> <p>With Hyl\u00e9, you can build permissionless zk-applications and still decide if you make your data public or if you keep it private. On top of that, Hyl\u00e9 verifies all zero-knowledge proofs, so you can choose your proving scheme, your language, your prover, and still get instant finality and enhanced security.</p> <p>Hyl\u00e9 comes with identity abstraction, making it easy and seamless to manage all account types: EOA, smart wallets, and more. Better yet, our native Name System is much more human-friendly than the usual raw hexadecimal addresses. Hyl\u00e9 addresses can be made of multiple parts, enabling bridgeless cross-chain composability down the line.</p> <p></p> <p>For more information, check out our website.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ol> <li>Check out how to install the CLI</li> <li>Learn how to create your first smart contract</li> </ol>"},{"location":"#our-use-cases","title":"Our use cases","text":"<ul> <li>Hyl\u00e9 for ZKApps </li> <li>Hyl\u00e9 for identity providers &amp; wallets</li> <li>Hyl\u00e9 for RAAS &amp; ZK Coprocessors (coming soon)</li> <li>...</li> </ul>"},{"location":"#contact-us","title":"Contact us","text":"<p>Feel free to reach out to the team for more information: - X @hyle_org - Farcaster @hyle-org - Telegram @hyle_org - Mail contact@hyle.eu</p>"},{"location":"#useful-links","title":"Useful links","text":"<ul> <li>Main repository (cosmos SDK app)</li> <li>Hyl\u00e9.eu</li> </ul>"},{"location":"testnet/","title":"Wen testnet ?","text":"<p>Soon\u2122</p> <p>In the meantime, we have a public devnet live, and you can also run your own!</p>"},{"location":"about-Hyl%C3%A9/","title":"Index","text":"<p>Coming soon.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the Getting Started guide for Hyl\u00e9. This page will help you configure your environment and start using Hyl\u00e9.</p> <p>Use the sidebar to navigate through the guide, or click on the links below to jump to a specific section:</p> <ol> <li>Check out how to install the CLI</li> <li>Learn how to create your first smart contract</li> </ol>"},{"location":"getting-started/connect-to-devnet/","title":"Connect to the public devnet","text":"<p>Hyl\u00e9 provides a public devnet for developers to test their applications.</p> <p>Note</p> <p>We currently make no guarantees on the public devnet stability. It can be reset at any time. We will keep this page updated with the latest information.</p>"},{"location":"getting-started/connect-to-devnet/#creating-your-wallet-on-our-public-devnet","title":"Creating your wallet on our public devnet","text":""},{"location":"getting-started/connect-to-devnet/#configure-your-environment","title":"Configure your environment:","text":"<pre><code># This script automatically sets up the devnet configuration\n./scripts/configure.sh\n# Create yourprivate key, you can name it however you want\n./hyled keys add my-key\nexport ADDRESS=$(./hyled keys show my-key -a) # for convenience\n</code></pre>"},{"location":"getting-started/connect-to-devnet/#claim-some-hyle-token-on-the-faucet-with-your-newly-created-address","title":"Claim some HYLE token on the faucet with your newly created address:","text":"<pre><code>curl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data \"{\\\"denom\\\":\\\"hyle\\\",\\\"address\\\":\\\"$ADDRESS\\\"}\" \\\n  https://faucet.devnet.hyle.eu/credit\n</code></pre>"},{"location":"getting-started/connect-to-devnet/#check-your-balance","title":"Check your balance:","text":"<p><pre><code>./hyled query bank balance $ADDRESS hyle\n</code></pre> You can also visit <code>https://explorer.hyle.eu/hyle/account/$ADDRESS</code></p>"},{"location":"getting-started/connect-to-devnet/#urls","title":"URLs","text":"<p>Explorer: https://explorer.hyle.eu/ Faucet: https://faucet.devnet.hyle.eu/ REST: https://api.devnet.hyle.eu/ RPC: https://rpc.devnet.hyle.eu/ CometBFT: https://cometbft.devnet.hyle.eu/ </p>"},{"location":"getting-started/hyled-install-instructions/","title":"CLI Installation instructions","text":"<p>The simplest way to interact with Hyl\u00e9 is using <code>hyled</code>, the cosmos-SDK powered CLI.</p> <p>Simply clone the Hyl\u00e9 repository and install it.</p>"},{"location":"getting-started/hyled-install-instructions/#mac-linux-windows-with-wsl","title":"Mac, Linux, Windows with WSL","text":"<p>You will need to have installed <code>make</code> and <code>go</code>, v1.20 and above, on your system</p> <p>Here are the commands: <pre><code>git clone https://github.com/Hyle-org/hyle.git\ncd hyle\nmake build # or make install\n</code></pre></p> <p>You can then get a list of commands with <code>hyled help</code>.</p> <p>TODO: write some additional useful commands here</p>"},{"location":"getting-started/hyled-install-instructions/#running-a-devnet","title":"Running a devnet","text":"<p>Simply run <pre><code>make init # This resets the blockchain data\n./hyled start\n</code></pre> Your node should start from block 0. Note that it persists data in a folder named <code>hyled-data</code> in the current working directory by default.</p>"},{"location":"getting-started/your-first-smart-contract/","title":"Your first smart contract","text":"<p>Our public devnet is now live !</p> <p>Note</p> <p>The Hyl\u00e9 API is very much a POC for now, and everything here will change and improve.</p>"},{"location":"getting-started/your-first-smart-contract/#coding-your-smart-contract","title":"Coding your smart contract","text":"<p>You can use any zkVM or proving scheme supported by Hyl\u00e9, which are currently:</p> <ul> <li>groth16 (using gnark and BN254)</li> <li>risc0</li> </ul> <p>TODO: specify transaction format, ABI, etc.</p>"},{"location":"getting-started/your-first-smart-contract/#installing-the-hyle-cli-tool","title":"Installing the Hyl\u00e9 CLI tool","text":"<p>The simplest way to interact with Hyl\u00e9 is using <code>hyled</code>, the cosmos-SDK powered CLI. Simply follow the installation instructions.</p>"},{"location":"getting-started/your-first-smart-contract/#registering-your-smart-contract","title":"Registering your smart contract","text":"<p>Hyl\u00e9 smart contracts are made of:</p> <ul> <li>a Name, which must be unique</li> <li>a tuple of (verifier, program_id) which identifies the smart contract. The <code>verifier</code> is the proof system (currently either \"risczero\" or \"gnark-groth16-te-BN254\"), and the <code>program_id</code> is the unique identifier of the program in that proof system, either the image ID in risczero of the verifying key in groth16 circuits.</li> <li>a state digest, holding the current state commitment of the contract. This can be any type of state commitment you want, and can currently be any size you want (this will have fee implications in the future)</li> </ul> <p>To register a contract on-chain, simply run the following command:</p> <pre><code># Owner is the address of the contract owner, which must match the transaction signer for now.\nhyled tx zktx register [owner] [contract_name] [verifier] [program_id] [state_digest]\n</code></pre> <p>You can check on Hyle's explorer to see your transaction: <code>https://explorer.hyle.eu/hyle/tx/$TXHASH</code> Your contract state is visible at: <code>https://explorer.hyle.eu/hyle/cosmwasm/0/transactions?contract=$CONTRACT_NAME</code></p>"},{"location":"getting-started/your-first-smart-contract/#interacting-with-hyle","title":"Interacting with Hyl\u00e9","text":""},{"location":"getting-started/your-first-smart-contract/#state-transitions","title":"State transitions","text":"<p>Once your contract has been registered, you can send valid proofs of state transition to permissionlessly update the contract.</p> <p>Note that the proofs must be \"full\", i.e. including the output of the computation. This allows contracts to specify if the full state diff must be provided, which enables DA on the Hyl\u00e9 chain. For private computations, you can simply provide a proof of state commitment transitions.</p> <pre><code># Signer is the address of the transaction signer.\nhyled tx zktx execute [contract_name] [receipt] [initial_state] [final_state] [signer]\n</code></pre>"},{"location":"getting-started/your-first-smart-contract/#verification-only","title":"Verification only","text":"<p>Hyle also supports verification-only transactions, which can be used to verify a proof without updating the state.</p> <pre><code># Signer is the address of the transaction signer.\nhyled tx zktx verify [contract_name] [receipt] [signer]\n</code></pre>"},{"location":"use-cases/","title":"Use cases","text":"<p>Welcome to the Use Cases guide for Hyl\u00e9. This page will help you understand how to use Hyl\u00e9 in different scenarios.</p> <ul> <li>Hyl\u00e9 for ZKApps </li> <li>Hyl\u00e9 for identity providers &amp; wallets</li> <li>Hyl\u00e9 for RAAS &amp; ZK Coprocessors (coming soon)</li> <li>...</li> </ul>"},{"location":"use-cases/for-identity-providers/","title":"Hyl\u00e9 for Identity Providers","text":"<p>Hyl\u00e9 does not specify what an \"account\" is, or even what identity particularly means. This gives it hitherto unheard of flexibility in handling identity, including: - EOAs like Ethereum native wallets - Smart accounts of any kind - Regular web2 identity - Passports &amp; other national identity documents.</p> <p>Note</p> <p>You are entering TODO area, none of this is currently implemented.</p> <p>The way identity is handled on Hyl\u00e9 relies simply on the caller contract in a multicall. When a user crafts a transaction, their first call should be a proof-of-identity, for example a call to the native <code>/eth</code> smart contract, which validates Ethereum-like EOA signatures. Any subsequent call can see that the user is indeed the owner of some <code>/eth</code> address, e.g. <code>0xfoobar/eth</code>, and can use that address name trustlessly.</p>"},{"location":"use-cases/for-identity-providers/#registering-your-own-stateless-identity-provider","title":"Registering your own stateless identity provider","text":"<p>There are two components to a stateless identity provider such as the Ethereum EOA smart contract: - A smart contract registered on Hyl\u00e9, authenticating proofs - A client-side library that can craft proofs</p> <p>See the Ethereum EOA smart contract for an example of such a provider.</p>"},{"location":"use-cases/for-identity-providers/#adding-support-for-your-smart-wallet","title":"Adding support for your smart wallet","text":"<p>TODO: the general idea here is that we need access to some state where smart contracts are registered (e.g. the starknet state), and can craft proofs in a similar way. The data is public, so this remains permissionless.</p>"},{"location":"use-cases/for-identity-providers/#registering-a-stateful-private-identity-provider","title":"Registering a stateful, private identity provider","text":"<p>This can be used by games, SSO providers, or any other use-case that needs to handle user identity in a more traditional way.</p> <p>TODO: the gist here is to actually use ZK, and create valid proofs that nonetheless do not reveal the inner details of the authentication, merely that a given user is indeed who they claim they are. The on-chain contract needs access to a valid state commitment.</p>"},{"location":"use-cases/for-zk-apps/","title":"Hyl\u00e9 for ZKApps","text":"<p>Hyl\u00e9 is a full featured settlement layer, providing fast finality and cheap TX cost. This makes it a great fit for use-cases that would require appchains or L3s in other ecosystems.</p> <p>TODO: schema of the different actors in a ZK game ecosystem.</p>"},{"location":"use-cases/for-zk-apps/#registering-your-smart-contract","title":"Registering your smart contract","text":"<p>See Your First Smart Contract for details.</p>"},{"location":"use-cases/for-zk-apps/#bring-your-own-accounts","title":"Bring your own accounts","text":"<p>See Hyl\u00e9 for Identity Providers</p>"}]}