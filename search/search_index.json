{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Hyl\u00e9","text":"<p>Hyl\u00e9 is a blockchain focused on verifying all types of zero knowledge proofs, enabling fast, cheap settlement.</p> <p>Note</p> <p>This developer portal is a WIP, and the project itself is still in early development.</p> <p>Feel free to reach out to the team for more information: X @hyle_org // Farcaster @hyle-org // Telegram @hyle_org // Mail contact@hyle.eu</p>"},{"location":"#starting-point","title":"Starting point","text":"<ul> <li>Hyl\u00e9 for ZKApps </li> <li>Hyl\u00e9 for coprocessors</li> <li>Hyl\u00e9 for identity providers &amp; wallets</li> </ul>"},{"location":"#useful-links","title":"Useful links","text":"<ul> <li>Main repository (cosmos SDK app)</li> <li>Hyl\u00e9.eu</li> </ul>"},{"location":"for-identity-providers/","title":"Hyl\u00e9 for Identity Providers","text":"<p>Hyl\u00e9 does not specify what an \"account\" is, or even what identity particularly means. This gives it hitherto unheard of flexibility in handling identity, including: - EOAs like Ethereum native wallets - Smart accounts of any kind - Regular web2 identity - Passports &amp; other national identity documents.</p> <p>Note</p> <p>You are entering TODO area, none of this is currently implemented.</p> <p>The way identity is handled on Hyl\u00e9 relies simply on the caller contract in a multicall. When a user crafts a transaction, their first call should be a proof-of-identity, for example a call to the native <code>/eth</code> smart contract, which validates Ethereum-like EOA signatures. Any subsequent call can see that the user is indeed the owner of some <code>/eth</code> address, e.g. <code>0xfoobar/eth</code>, and can use that address name trustlessly.</p>"},{"location":"for-identity-providers/#registering-your-own-stateless-identity-provider","title":"Registering your own stateless identity provider","text":"<p>There are two components to a stateless identity provider such as the Ethereum EOA smart contract: - A smart contract registered on Hyl\u00e9, authenticating proofs - A client-side library that can craft proofs</p> <p>See the Ethereum EOA smart contract for an example of such a provider.</p>"},{"location":"for-identity-providers/#adding-support-for-your-smart-wallet","title":"Adding support for your smart wallet","text":"<p>TODO: the general idea here is that we need access to some state where smart contracts are registered (e.g. the starknet state), and can craft proofs in a similar way. The data is public, so this remains permissionless.</p>"},{"location":"for-identity-providers/#registering-a-stateful-private-identity-provider","title":"Registering a stateful, private identity provider","text":"<p>This can be used by games, SSO providers, or any other use-case that needs to handle user identity in a more traditional way.</p> <p>TODO: the gist here is to actually use ZK, and create valid proofs that nonetheless do not reveal the inner details of the authentication, merely that a given user is indeed who they claim they are. The on-chain contract needs access to a valid state commitment.</p>"},{"location":"for-zk-apps/","title":"Hyl\u00e9 for ZKApps","text":"<p>Hyl\u00e9 is a full featured settlement layer, providing fast finality and cheap TX cost. This makes it a great fit for use-cases that would require appchains or L3s in other ecosystems.</p> <p>TODO: schema of the different actors in a ZK game ecosystem.</p>"},{"location":"for-zk-apps/#registering-your-smart-contract","title":"Registering your smart contract","text":"<p>TODO</p>"},{"location":"for-zk-apps/#interacting-with-hyle","title":"Interacting with Hyl\u00e9","text":"<p>TODO: anatomy of a transaction, ABI of a state diff</p>"},{"location":"for-zk-apps/#bring-your-own-accounts","title":"Bring your own accounts","text":"<p>See Hyl\u00e9 for Identity Providers</p>"},{"location":"hyled-install-instructions/","title":"CLI Installation instructions","text":"<p>The simplest way to interact with Hyl\u00e9 is using <code>hyled</code>, the cosmos-SDK powered CLI.</p> <p>Simply clone the Hyl\u00e9 repository and install it.</p>"},{"location":"hyled-install-instructions/#mac-linux-windows-with-wsl","title":"Mac, Linux, Windows with WSL","text":"<p>You will need to have installed <code>make</code> and <code>go</code>, v1.20 and above, on your system</p> <p>Here are the commands: <pre><code>git clone https://github.com/Hyle-org/hyle.git\ncd hyle\nmake build # or make install\n</code></pre></p> <p>You can then get a list of commands with <code>hyled help</code>.</p> <p>TODO: write some additional useful commands here</p>"},{"location":"testnet/","title":"Wen testnet ?","text":"<p>Soon\u2122.</p>"},{"location":"your-first-smart-contract/","title":"Your first smart contract","text":"<p>Hyl\u00e9 is not currently in testnet, but we'll be soon !</p> <p>Note</p> <p>The Hyl\u00e9 API is very much a POC for now, and everything here will change and improve In particular, requiring signers will soon be changed.</p>"},{"location":"your-first-smart-contract/#coding-your-smart-contract","title":"Coding your smart contract","text":"<p>You can use any zkVM or proving scheme supported by Hyl\u00e9, which are currently: - groth16 - risc0</p> <p>TODO: specify transaction format, ABI, etc.</p>"},{"location":"your-first-smart-contract/#installing-the-hyle-cli-tool","title":"Installing the Hyl\u00e9 CLI tool","text":"<p>The simplest way to interact with Hyl\u00e9 is using <code>hyled</code>, the cosmos-SDK powered CLI. Simply follow the installation instructions.</p>"},{"location":"your-first-smart-contract/#registering-your-smart-contract","title":"Registering your smart contract","text":"<p>Hyl\u00e9 smart contracts are made of: - a Name, which must be unique - a tuple of (verifier, program_id) which identifies the smart contract. The <code>verifier</code> is the proof system (currently either \"risczero\" or \"groth16-twistededwards-BN254\"), and the <code>program_id</code> is the unique identifier of the program in that proof system, either the image ID in risczero of the verifying key in groth16 circuits. - a state digest, holding the current state commitment of the contract. This can be any type of state commitment you want, and can currently be any size you want (this will have fee implications in the future)</p> <p>To register a contract on-chain, simply run the following command:</p> <pre><code># Owner is the address of the contract owner, which must match the transaction signer for now.\nhyled tx zktx register [owner] [contract_name] [verifier] [program_id] [state_digest]\n</code></pre>"},{"location":"your-first-smart-contract/#interacting-with-hyle","title":"Interacting with Hyl\u00e9","text":"<p>Once your contract has been registered, you can send valid proofs of state transition to permissionlessly update the contract.</p> <p>Note that the proofs must be \"full\", i.e. including the output of the computation. This allows contracts to specify if the full state diff must be provided, which enables DA on the Hyl\u00e9 chain. For private computations, you can simply provide a proof of state commitment transitions.</p> <pre><code># Signer is the address of the transaction signer.\nhyled tx zktx execute [contract_name] [receipt] [initial_state] [final_state] [signer]\n</code></pre>"}]}